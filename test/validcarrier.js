{
    currentDate: {
      _isAMomentObject: true,
      _isUTC: true,
      _pf: {
        empty: false,
        unusedTokens: [
        ],
        unusedInput: [
        ],
        overflow: -2,
        charsLeftOver: 0,
        nullInput: false,
        invalidEra: null,
        invalidMonth: null,
        invalidFormat: false,
        userInvalidated: false,
        iso: false,
        parsedDateParts: [
        ],
        era: null,
        meridiem: null,
        rfc2822: false,
        weekdayMismatch: false,
      },
      _locale: {
        _calendar: {
          sameDay: "[Today at] LT",
          nextDay: "[Tomorrow at] LT",
          nextWeek: "dddd [at] LT",
          lastDay: "[Yesterday at] LT",
          lastWeek: "[Last] dddd [at] LT",
          sameElse: "L",
        },
        _longDateFormat: {
          LTS: "h:mm:ss A",
          LT: "h:mm A",
          L: "MM/DD/YYYY",
          LL: "MMMM D, YYYY",
          LLL: "MMMM D, YYYY h:mm A",
          LLLL: "dddd, MMMM D, YYYY h:mm A",
        },
        _invalidDate: "Invalid date",
        ordinal: function (number) {
          var b = number % 10,
              output =
                  toInt((number % 100) / 10) === 1
                      ? 'th'
                      : b === 1
                      ? 'st'
                      : b === 2
                      ? 'nd'
                      : b === 3
                      ? 'rd'
                      : 'th';
          return number + output;
        },
        _dayOfMonthOrdinalParse: {
        },
        _relativeTime: {
          future: "in %s",
          past: "%s ago",
          s: "a few seconds",
          ss: "%d seconds",
          m: "a minute",
          mm: "%d minutes",
          h: "an hour",
          hh: "%d hours",
          d: "a day",
          dd: "%d days",
          w: "a week",
          ww: "%d weeks",
          M: "a month",
          MM: "%d months",
          y: "a year",
          yy: "%d years",
        },
        _months: [
          "January",
          "February",
          "March",
          "April",
          "May",
          "June",
          "July",
          "August",
          "September",
          "October",
          "November",
          "December",
        ],
        _monthsShort: [
          "Jan",
          "Feb",
          "Mar",
          "Apr",
          "May",
          "Jun",
          "Jul",
          "Aug",
          "Sep",
          "Oct",
          "Nov",
          "Dec",
        ],
        _week: {
          dow: 0,
          doy: 6,
        },
        _weekdays: [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday",
        ],
        _weekdaysMin: [
          "Su",
          "Mo",
          "Tu",
          "We",
          "Th",
          "Fr",
          "Sa",
        ],
        _weekdaysShort: [
          "Sun",
          "Mon",
          "Tue",
          "Wed",
          "Thu",
          "Fri",
          "Sat",
        ],
        _meridiemParse: {
        },
        _eras: [
          {
            since: "0001-01-01",
            until: Infinity,
            offset: 1,
            name: "Anno Domini",
            narrow: "AD",
            abbr: "AD",
          },
          {
            since: "0000-12-31",
            until: -Infinity,
            offset: 1,
            name: "Before Christ",
            narrow: "BC",
            abbr: "BC",
          },
        ],
        _abbr: "en",
        _config: {
          calendar: {
            sameDay: "[Today at] LT",
            nextDay: "[Tomorrow at] LT",
            nextWeek: "dddd [at] LT",
            lastDay: "[Yesterday at] LT",
            lastWeek: "[Last] dddd [at] LT",
            sameElse: "L",
          },
          longDateFormat: {
            LTS: "h:mm:ss A",
            LT: "h:mm A",
            L: "MM/DD/YYYY",
            LL: "MMMM D, YYYY",
            LLL: "MMMM D, YYYY h:mm A",
            LLLL: "dddd, MMMM D, YYYY h:mm A",
          },
          invalidDate: "Invalid date",
          ordinal: function (number) {
            var b = number % 10,
                output =
                    toInt((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
          },
          dayOfMonthOrdinalParse: {
          },
          relativeTime: {
            future: "in %s",
            past: "%s ago",
            s: "a few seconds",
            ss: "%d seconds",
            m: "a minute",
            mm: "%d minutes",
            h: "an hour",
            hh: "%d hours",
            d: "a day",
            dd: "%d days",
            w: "a week",
            ww: "%d weeks",
            M: "a month",
            MM: "%d months",
            y: "a year",
            yy: "%d years",
          },
          months: [
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December",
          ],
          monthsShort: [
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec",
          ],
          week: {
            dow: 0,
            doy: 6,
          },
          weekdays: [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
          ],
          weekdaysMin: [
            "Su",
            "Mo",
            "Tu",
            "We",
            "Th",
            "Fr",
            "Sa",
          ],
          weekdaysShort: [
            "Sun",
            "Mon",
            "Tue",
            "Wed",
            "Thu",
            "Fri",
            "Sat",
          ],
          meridiemParse: {
          },
          eras: [
            {
              since: "0001-01-01",
              until: Infinity,
              offset: 1,
              name: "Anno Domini",
              narrow: "AD",
              abbr: "AD",
            },
            {
              since: "0000-12-31",
              until: -Infinity,
              offset: 1,
              name: "Before Christ",
              narrow: "BC",
              abbr: "BC",
            },
          ],
          abbr: "en",
        },
        _dayOfMonthOrdinalParseLenient: {
        },
      },
      _d: "2024-06-13T07:55:50.354Z",
      _isValid: true,
      _z: null,
      _offset: 0,
    },
    owner: "663de43c4a41f49c718c13e1-carrier",
    typeOfLoad: "IMPORT",
    customers: {
      _id: "663e010d4a41f49c718c1d62",
    },
    pickupLocation: [
      {
        _id: "6645e6ce7f244cd97e74a490",
        name: "Pesto (One!)",
        city: "Melbourne",
        state: "VIC",
        country: "AU",
        zipCode: "3000",
      },
    ],
    deliveryLocation: [
      {
        _id: "663e010d4a41f49c718c1d64",
        name: "Jet Consignee",
        city: "New York",
        state: "NY",
        country: "US",
        zipCode: "10065",
      },
    ],
    routing: [
      {
        type: "PULLCONTAINER",
        customers: {
          _id: "6645e6ce7f244cd97e74a490",
          city: "Melbourne",
          state: "VIC",
          zipCode: "3000",
        },
      },
      {
        type: "DELIVERLOAD",
        customers: {
          _id: "663e010d4a41f49c718c1d64",
          city: "New York",
          state: "NY",
          zipCode: "10065",
        },
      },
      {
        type: "RETURNCONTAINER",
      },
    ],
    overweight: false,
    genset: false,
    hazmat: false,
    domestic: undefined,
    ev: undefined,
    waste: undefined,
    gdp: undefined,
    isRail: undefined,
    liquor: false,
    hot: false,
    priority: {
      basic: {
        customers: 1,
        customers_group: 2,
        customers_zipCode: 3,
        customers_zipCode_group: 4,
        customers_cityState: 5,
        customers_cityState_group: 6,
        customers_any: 7,
        deliveryLocation: 8,
        deliveryLocation_group: 9,
        deliveryLocation_zipCode: 10,
        deliveryLocation_zipCode_group: 11,
        deliveryLocation_cityState: 12,
        deliveryLocation_cityState_group: 13,
        deliveryLocation_any: 14,
        pickupLocation: 15,
        pickupLocation_group: 16,
        pickupLocation_zipCode: 17,
        pickupLocation_zipCode_group: 18,
        pickupLocation_cityState: 19,
        pickupLocation_cityState_group: 20,
        pickupLocation_any: 21,
        returnLocation: 22,
        returnLocation_group: 23,
        returnLocation_zipCode: 24,
        returnLocation_zipCode_group: 25,
        returnLocation_cityState: 26,
        returnLocation_cityState_group: 27,
        returnLocation_any: 28,
      },
      optional: {
        customerEmployee: 1,
        ssl: 2,
        csr: 3,
        hazmat: 4,
        overweight: 5,
        liquor: 6,
        hot: 7,
        genset: 8,
        domestic: 9,
        ev: 10,
        waste: 11,
        gdp: 12,
        isRail: 13,
        customerDepartment: 14,
        containerType: 15,
        containerSize: 16,
        chassisSize: 17,
        chassisOwner: 18,
        chassisType: 19,
      },
      advanced: {
        customers: 1,
        customers_group: 2,
        customers_any: 3,
        dropContainer: 4,
        dropContainer_group: 5,
        dropContainer_zipCode: 6,
        dropContainer_zipCode_group: 7,
        dropContainer_cityState: 8,
        dropContainer_cityState_group: 9,
        dropContainer_template: 10,
        deliverLoad: 11,
        deliverLoad_group: 12,
        deliverLoad_zipCode: 13,
        deliverLoad_zipCode_group: 14,
        deliverLoad_cityState: 15,
        deliverLoad_cityState_group: 16,
        deliverLoad_template: 17,
        stopOff: 18,
        stopOff_group: 19,
        stopOff_zipCode: 20,
        stopOff_zipCode_group: 21,
        stopOff_cityState: 22,
        stopOff_cityState_group: 23,
        stopOff_template_exact: 24,
        stopOff_template: 25,
        liftOnOff: 26,
        liftOnOff_group: 27,
        liftOnOff_zipCode: 28,
        liftOnOff_zipCode_group: 29,
        liftOnOff_cityState: 30,
        liftOnOff_cityState_group: 31,
        liftOnOff_template: 32,
        pullContainer: 33,
        pullContainer_group: 34,
        pullContainer_zipCode: 35,
        pullContainer_zipCode_group: 36,
        pullContainer_cityState: 37,
        pullContainer_cityState_group: 38,
        pullContainer_template: 39,
        returnContainer: 40,
        returnContainer_group: 41,
        returnContainer_zipCode: 42,
        returnContainer_zipCode_group: 43,
        returnContainer_cityState: 44,
        returnContainer_cityState_group: 45,
        returnContainer_template: 46,
        chassisPick: 47,
        chassisPick_group: 48,
        chassisPick_zipCode: 49,
        chassisPick_zipCode_group: 50,
        chassisPick_cityState: 51,
        chassisPick_cityState_group: 52,
        chassisPick_template: 53,
        chassisTermination: 54,
        chassisTermination_group: 55,
        chassisTermination_zipCode: 56,
        chassisTermination_zipCode_group: 57,
        chassisTermination_cityState: 58,
        chassisTermination_cityState_group: 59,
        chassisTermination_template: 60,
      },
    },
    priorityOrder: {
      basic: [
        "customers",
        "deliveryLocation",
        "pickupLocation",
        "returnLocation",
      ],
      advanced: [
        "customers",
        "dropContainer",
        "deliverLoad",
        "stopOff",
        "liftOnOff",
        "pullContainer",
        "returnContainer",
        "chassisPick",
        "chassisTermination",
      ],
      optional: [
        "customerEmployee",
        "ssl",
        "csr",
        "hazmat",
        "overweight",
        "liquor",
        "hot",
        "genset",
        "domestic",
        "ev",
        "waste",
        "gdp",
        "isRail",
        "customerDepartment",
        "containerType",
        "containerSize",
        "chassisSize",
        "chassisOwner",
        "chassisType",
      ],
    },
    additionalInfo: {
      vendorList: [
        "663de58fbfd8ce1a9bc46025",
      ],
      vendorType: "carrier",
    },
    groupInformation: {
      profile: {
      },
      zipCode: {
      },
      cityState: {
      },
      vendor: {
      },
    },
    isLoadPayloadValidForBasic: true,
  }